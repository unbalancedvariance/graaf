"use strict";(self.webpackChunkgraaf=self.webpackChunkgraaf||[]).push([[907],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>g});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),p=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(r),u=n,g=c["".concat(l,".").concat(u)]||c[u]||m[u]||i;return r?a.createElement(g,o(o({ref:t},d),{},{components:r})):a.createElement(g,o({ref:t},d))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:n,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},6343:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=r(7462),n=(r(7294),r(3905));const i={},o="Dot Serialization Example",s={unversionedId:"examples/example-basics/dot-serialization",id:"examples/example-basics/dot-serialization",title:"Dot Serialization Example",description:"The to_dot function as defined under graaf::io can be used to searialize graphs to",source:"@site/docs/examples/example-basics/dot-serialization.md",sourceDirName:"examples/example-basics",slug:"/examples/example-basics/dot-serialization",permalink:"/graaf/docs/examples/example-basics/dot-serialization",draft:!1,editUrl:"https://github.com/bobluppes/graaf/tree/main/docs/examples/example-basics/dot-serialization.md",tags:[],version:"current",frontMatter:{},sidebar:"exampleSidebar",previous:{title:"Basic Examples",permalink:"/graaf/docs/category/basic-examples"},next:{title:"Shortest Path Example",permalink:"/graaf/docs/examples/example-basics/shortest-path"}},l={},p=[{value:"Numeric primitive types",id:"numeric-primitive-types",level:2},{value:"User defined types",id:"user-defined-types",level:2}],d={toc:p},c="wrapper";function m(e){let{components:t,...i}=e;return(0,n.kt)(c,(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"dot-serialization-example"},"Dot Serialization Example"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"to_dot")," function as defined under ",(0,n.kt)("inlineCode",{parentName:"p"},"graaf::io")," can be used to searialize graphs to\nthe ",(0,n.kt)("a",{parentName:"p",href:"https://graphviz.org/doc/info/lang.html"},"dot format"),". This can be handy for debugging purposes, as well as for\npost-processing of your graphs in another tool which supports the format."),(0,n.kt)("h2",{id:"numeric-primitive-types"},"Numeric primitive types"),(0,n.kt)("p",null,"Default vertex and edge writers are provided such that you can serialize graphs with numeric primitive vertices and\nedges. For instance:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"graaf::undirected_graph<int, float> my_graph{};\n\n// ...\n\ngraaf::io::to_dot(my_graph, path):\n")),(0,n.kt)("h2",{id:"user-defined-types"},"User defined types"),(0,n.kt)("p",null,"For user defined vertex and edge types, it is necessary to provide your own vertex and edge writers. These writers\nshould take a vertex or edge as a parameter and serialize it to a string. This resulting string is used in the\ndot ",(0,n.kt)("a",{parentName:"p",href:"https://graphviz.org/doc/info/attrs.html"},"attribute list")," of the respective vertex or edge."),(0,n.kt)("p",null,"For example, consider the following user defined vertex and edge types:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"struct my_vertex {\n  int number{};\n  std::string name{};\n};\n\nenum class edge_priority { LOW, HIGH };\n\nstruct my_edge {\n  edge_priority priority{edge_priority::LOW};\n  float weight{};\n};\n")),(0,n.kt)("p",null,"We define two lambdas to serialize these vertices and edges. Here we can use any of\nthe ",(0,n.kt)("a",{parentName:"p",href:"https://graphviz.org/doc/info/attrs.html"},"graphviz attributes"),". In this example, we\nuse ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/fmtlib/fmt"},"fmtlib")," to format our strings."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Vertex writer")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},'const auto vertex_writer{[](graaf::vertex_id_t vertex_id,\n                              const my_vertex& vertex) -> std::string {\n  const auto color{vertex.number <= 25 ? "lightcyan" : "mediumspringgreen"};\n  return fmt::format("label=\\"{}: {}\\", fillcolor={}, style=filled", vertex_id, vertex.name, color);\n}};\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Edge writer")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},'const auto edge_writer{[](const graaf::vertex_ids_t& /*edge_id*/,\n                            const my_edge& edge) -> std::string {\n  const auto style{edge.priority == edge_priority::HIGH ? "solid" : "dashed"};\n  return fmt::format("label=\\"{}\\", style={}, color=gray, fontcolor=gray", edge.weight, style);\n}};\n')),(0,n.kt)("p",null,"Now let's create a directed graph and serialize it to dot:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},'graaf::directed_graph<my_vertex, my_edge> graph{};\n\nconst auto vertex_1{graph.add_vertex({10, "some data"})};\nconst auto vertex_2{graph.add_vertex({20, "some more data"})};\n// ...\n\ngraph.add_edge(vertex_1, vertex_2, {edge_priority::HIGH, 3.3});\n// ...\n\nconst std::filesystem::path dof_file_path{"./my_graph.dot"};\ngraaf::io::to_dot(my_graph, dof_file_path, vertex_writer, edge_writer);\n')),(0,n.kt)("p",null,"The contents of ",(0,n.kt)("inlineCode",{parentName:"p"},"my_graph.dot")," can be processed in any tool which supports dot format. For example, you can use\nthe ",(0,n.kt)("inlineCode",{parentName:"p"},"dot")," command line tool to generate png images:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"dot -Tpng ./my_graph.dot -o my_graph.png\n")),(0,n.kt)("p",null,"Alternatively, you can\nuse ",(0,n.kt)("a",{parentName:"p",href:"https://dreampuf.github.io/GraphvizOnline/#digraph%20G%20%7B%0A%0A%20%20subgraph%20cluster_0%20%7B%0A%20%20%20%20style%3Dfilled%3B%0A%20%20%20%20color%3Dlightgrey%3B%0A%20%20%20%20node%20%5Bstyle%3Dfilled%2Ccolor%3Dwhite%5D%3B%0A%20%20%20%20a0%20-%3E%20a1%20-%3E%20a2%20-%3E%20a3%3B%0A%20%20%20%20label%20%3D%20%22process%20%231%22%3B%0A%20%20%7D%0A%0A%20%20subgraph%20cluster_1%20%7B%0A%20%20%20%20node%20%5Bstyle%3Dfilled%5D%3B%0A%20%20%20%20b0%20-%3E%20b1%20-%3E%20b2%20-%3E%20b3%3B%0A%20%20%20%20label%20%3D%20%22process%20%232%22%3B%0A%20%20%20%20color%3Dblue%0A%20%20%7D%0A%20%20start%20-%3E%20a0%3B%0A%20%20start%20-%3E%20b0%3B%0A%20%20a1%20-%3E%20b3%3B%0A%20%20b2%20-%3E%20a3%3B%0A%20%20a3%20-%3E%20a0%3B%0A%20%20a3%20-%3E%20end%3B%0A%20%20b3%20-%3E%20end%3B%0A%0A%20%20start%20%5Bshape%3DMdiamond%5D%3B%0A%20%20end%20%5Bshape%3DMsquare%5D%3B%0A%7D"},"graphviz online"),"\nfor easy visualization:"),(0,n.kt)("pre",null,(0,n.kt)("p",{align:"center"},(0,n.kt)("img",{src:r(3032).Z}))))}m.isMDXComponent=!0},3032:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/dot-serialization-graph-a08ab35d30c6290e06ba3d7d66564475.png"}}]);