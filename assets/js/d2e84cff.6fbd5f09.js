"use strict";(self.webpackChunkgraaf=self.webpackChunkgraaf||[]).push([[209],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),s=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},d=function(e){var t=s(e.components);return n.createElement(o.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(r),m=a,h=p["".concat(o,".").concat(m)]||p[m]||u[m]||i;return r?n.createElement(h,c(c({ref:t},d),{},{components:r})):n.createElement(h,c({ref:t},d))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,c=new Array(i);c[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[p]="string"==typeof e?e:a,c[1]=l;for(var s=2;s<i;s++)c[s]=r[s];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7713:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const i={},c="DFS Based Cycle Detection",l={unversionedId:"algorithms/cycle-detection/dfs-based",id:"algorithms/cycle-detection/dfs-based",title:"DFS Based Cycle Detection",description:"A DFS based cycle detection algorithm is used to identify cycles in graphs, both directed and undirected.",source:"@site/docs/algorithms/cycle-detection/dfs-based.md",sourceDirName:"algorithms/cycle-detection",slug:"/algorithms/cycle-detection/dfs-based",permalink:"/graaf/docs/algorithms/cycle-detection/dfs-based",draft:!1,editUrl:"https://github.com/bobluppes/graaf/tree/main/docs/algorithms/cycle-detection/dfs-based.md",tags:[],version:"current",frontMatter:{},sidebar:"algorithmSidebar",previous:{title:"Cycle Detection Algorithms",permalink:"/graaf/docs/category/cycle-detection-algorithms"},next:{title:"Minimum Spanning Tree",permalink:"/graaf/docs/category/minimum-spanning-tree"}},o={},s=[{value:"Syntax",id:"syntax",level:2},{value:"Similar algorithms",id:"similar-algorithms",level:2}],d={toc:s},p="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dfs-based-cycle-detection"},"DFS Based Cycle Detection"),(0,a.kt)("p",null,"A DFS based cycle detection algorithm is used to identify cycles in graphs, both directed and undirected.\nThe algorithm can be used to detect cycles in the structure of a graph, as it does not consider edge weights."),(0,a.kt)("h1",{id:"directed-graph"},"Directed graph"),(0,a.kt)("p",null,"The key idea is that when a vertex is processed, mark it as: UNVISITED, VISITED and NO_CYCLE.\nBy default all vertices marked as UNVISITED. During the traversal, we label vertices as VISITED. At the exit of the\nrecursion, we label the vertex as NO CYCLE.\nIf we met a vertex labeled VISITED, we found a cycle in the graph."),(0,a.kt)("h1",{id:"undirected-graph"},"Undirected graph"),(0,a.kt)("p",null,"The key idea is to store the parent of each vertex during the traversal. So when we check neighboring vertices, we skip\nback edge.\nDuring the traversal we mark the vertex as visited and continue the traversal. In case a vertex was visited before and\nvertices have different parents, we found a cycle."),(0,a.kt)("p",null,"The runtime of the algorithm is ",(0,a.kt)("inlineCode",{parentName:"p"},"O(|V| + |E|)")," and memory consumption is ",(0,a.kt)("inlineCode",{parentName:"p"},"O(|V|)"),". Where V is the number of vertices in\nthe graph and E the number of edges.\nThe algorithm uses DFS traversal and therefore suffers the same limitations (see depth-first-search.md)."),(0,a.kt)("h1",{id:"use-cases"},"Use cases"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Resource dependencies:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Redundant connections."),(0,a.kt)("li",{parentName:"ul"},"Deadlocks in concurrent systems."),(0,a.kt)("li",{parentName:"ul"},"Deadlocks in concurrent systems."))),(0,a.kt)("li",{parentName:"ul"},"Logical dependencies:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Data base relation."),(0,a.kt)("li",{parentName:"ul"},"Dependency management."),(0,a.kt)("li",{parentName:"ul"},"Circuit design."))),(0,a.kt)("li",{parentName:"ul"},"Infinity loops.")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Cycle_(graph_theory)#Cycle_detection"},"wikipedia")),(0,a.kt)("h2",{id:"syntax"},"Syntax"),(0,a.kt)("p",null,"Cycle detection for directed graph."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"template <typename V, typename E>\n[[nodiscard]] bool dfs_cycle_detection(\n    const graph<V, E, graph_type::DIRECTED> &graph);\n\n")),(0,a.kt)("p",null,"Cycle detection for unidrected graph."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"template <typename V, typename E>\n[[nodiscard]] bool dfs_cycle_detection(\n    const graph<V, E, graph_type::UNDIRECTED> &graph);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"graph")," The graph to traverse."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"return")," Returns true in case of cycle otherwise returns false.")),(0,a.kt)("h2",{id:"similar-algorithms"},"Similar algorithms"),(0,a.kt)("p",null,"There are many algorithms for cycle detection or algorithms with specific cycle conditions.\nSee ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Cycle_(graph_theory)#Graph_classes_defined_by_cycle"},"wikipedia")))}u.isMDXComponent=!0}}]);