"use strict";(self.webpackChunkgraaf=self.webpackChunkgraaf||[]).push([[589],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),m=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=m(r),g=i,h=c["".concat(l,".").concat(g)]||c[g]||u[g]||a;return r?n.createElement(h,o(o({ref:t},p),{},{components:r})):n.createElement(h,o({ref:t},p))}));function h(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:i,o[1]=s;for(var m=2;m<a;m++)o[m]=r[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},1897:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>m});var n=r(7462),i=(r(7294),r(3905));const a={},o="Prim's Algorithm",s={unversionedId:"algorithms/minimum-spanning-tree/prim",id:"algorithms/minimum-spanning-tree/prim",title:"Prim's Algorithm",description:"Prim's algorithm computes the minimum spanning tree (MST) of a connected, undirected graph with weighted edges. Starting",source:"@site/docs/algorithms/minimum-spanning-tree/prim.md",sourceDirName:"algorithms/minimum-spanning-tree",slug:"/algorithms/minimum-spanning-tree/prim",permalink:"/graaf/docs/algorithms/minimum-spanning-tree/prim",draft:!1,editUrl:"https://github.com/bobluppes/graaf/tree/main/docs/algorithms/minimum-spanning-tree/prim.md",tags:[],version:"current",frontMatter:{},sidebar:"algorithmSidebar",previous:{title:"Kruskal's Algorithm",permalink:"/graaf/docs/algorithms/minimum-spanning-tree/kruskal"},next:{title:"Shortest Path Algorithms",permalink:"/graaf/docs/category/shortest-path-algorithms"}},l={},m=[{value:"Syntax",id:"syntax",level:2}],p={toc:m},c="wrapper";function u(e){let{components:t,...r}=e;return(0,i.kt)(c,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"prims-algorithm"},"Prim's Algorithm"),(0,i.kt)("p",null,"Prim's algorithm computes the minimum spanning tree (MST) of a connected, undirected graph with weighted edges. Starting\nwith an arbitrary vertex, the algorithm iteratively selects the edge with the smallest weight that connects a\nvertex in the tree to a vertex outside the tree, adding it to the MST."),(0,i.kt)("p",null,"The algorithm's worst-case time complexity is O(\u2223E\u2223log\u2223V\u2223)."),(0,i.kt)("p",null,"Unlike Kruskal's algorithm, Prim's algorithm works efficiently on dense graphs. A limitation is that it requires the\ngraph to be connected and does not handle disconnected graphs or graphs with negative-weight cycles."),(0,i.kt)("p",null,"Prim's MST is often used in network design, such as electrical wiring and telecommunications."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Prim%27s_algorithm"},"wikipedia")),(0,i.kt)("h2",{id:"syntax"},"Syntax"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"template <typename V, typename E>\n[[nodiscard]] std::optional<std::vector<edge_id_t> > prim_minimum_spanning_tree(\n    const graph<V, E, graph_type::UNDIRECTED>& graph, vertex_id_t start_vertex);\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"graph")," The undirected graph for which we want to compute the MST."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"start_vertex")," The vertex ID which should be the root of the MST."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"return")," Returns a vector of edges that form MST if the graph is connected, otherwise returns an empty optional.")))}u.isMDXComponent=!0}}]);