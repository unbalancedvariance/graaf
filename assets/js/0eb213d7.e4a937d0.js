"use strict";(self.webpackChunkgraaf=self.webpackChunkgraaf||[]).push([[991],{3905:(e,t,r)=>{r.d(t,{Zo:()=>h,kt:()=>d});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=a.createContext({}),p=function(e){var t=a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},h=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),c=p(r),u=n,d=c["".concat(i,".").concat(u)]||c[u]||m[u]||o;return r?a.createElement(d,s(s({ref:t},h),{},{components:r})):a.createElement(d,s({ref:t},h))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[c]="string"==typeof e?e:n,s[1]=l;for(var p=2;p<o;p++)s[p]=r[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},8166:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=r(7462),n=(r(7294),r(3905));const o={},s="Bellman-Ford Shortest Path",l={unversionedId:"algorithms/shortest-path/bellman-ford",id:"algorithms/shortest-path/bellman-ford",title:"Bellman-Ford Shortest Path",description:"Bellman-Ford's algorithm computes shortest paths from a single source vertex to all of the other vertices in weighted",source:"@site/docs/algorithms/shortest-path/bellman-ford.md",sourceDirName:"algorithms/shortest-path",slug:"/algorithms/shortest-path/bellman-ford",permalink:"/graaf/docs/algorithms/shortest-path/bellman-ford",draft:!1,editUrl:"https://github.com/bobluppes/graaf/tree/main/docs/algorithms/shortest-path/bellman-ford.md",tags:[],version:"current",frontMatter:{},sidebar:"algorithmSidebar",previous:{title:"A* Search Algorithm",permalink:"/graaf/docs/algorithms/shortest-path/a-star"},next:{title:"BFS Based Shortest Path",permalink:"/graaf/docs/algorithms/shortest-path/bfs-based-shortest-path"}},i={},p=[{value:"Syntax",id:"syntax",level:2}],h={toc:p},c="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(c,(0,a.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"bellman-ford-shortest-path"},"Bellman-Ford Shortest Path"),(0,n.kt)("p",null,"Bellman-Ford's algorithm computes shortest paths from a single source vertex to all of the other vertices in weighted\ngraph and unweighted graphs. In weighted graphs, edge weights are allowed to be negative. Bellman-Ford's algorithm runs\nin ",(0,n.kt)("inlineCode",{parentName:"p"},"O(|E||V|)")," for connected graphs, where ",(0,n.kt)("inlineCode",{parentName:"p"},"|E|")," is the number of edges and ",(0,n.kt)("inlineCode",{parentName:"p"},"|V|")," the number of vertices in the\ngraph."),(0,n.kt)("p",null,"A limitation is that this implementation doesn't check for negative-weight cycles."),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm"},"wikipedia")),(0,n.kt)("h2",{id:"syntax"},"Syntax"),(0,n.kt)("p",null,"Find the shortest paths from a source vertex to all other vertices using the Bellman-Ford algorithm."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"template <typename V, typename E, graph_type T, \n          typename WEIGHT_T = decltype(get_weight(std::declval<E>()))>\nstd::unordered_map<vertex_id_t, graph_path<WEIGHT_T>>\nbellman_ford_shortest_paths(const graph<V, E, T>& graph, vertex_id_t start_vertex);\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"graph")," The graph to extract shortest path from."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"start_vertex")," The source vertex for the shortest paths."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"return")," A map of target vertex IDs to shortest path structures.\nEach value contains a graph_path object representing the shortest path from the source vertex to the respective\nvertex.\nIf a vertex is unreachable from the source, its entry will be absent from the map.")))}m.isMDXComponent=!0}}]);