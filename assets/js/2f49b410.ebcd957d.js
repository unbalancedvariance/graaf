"use strict";(self.webpackChunkgraaf=self.webpackChunkgraaf||[]).push([[284],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=l(n),u=i,d=c["".concat(p,".").concat(u)]||c[u]||g[u]||a;return n?r.createElement(d,o(o({ref:t},m),{},{components:n})):r.createElement(d,o({ref:t},m))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4870:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const a={},o="Kruskal's Algorithm",s={unversionedId:"algorithms/minimum-spanning-tree/kruskal",id:"algorithms/minimum-spanning-tree/kruskal",title:"Kruskal's Algorithm",description:"Kruskal's algorithm finds the minimum spanning forest of an undirected edge-weighted graph. If the graph is connected,",source:"@site/docs/algorithms/minimum-spanning-tree/kruskal.md",sourceDirName:"algorithms/minimum-spanning-tree",slug:"/algorithms/minimum-spanning-tree/kruskal",permalink:"/graaf/docs/algorithms/minimum-spanning-tree/kruskal",draft:!1,editUrl:"https://github.com/bobluppes/graaf/tree/main/docs/algorithms/minimum-spanning-tree/kruskal.md",tags:[],version:"current",frontMatter:{},sidebar:"algorithmSidebar",previous:{title:"Minimum Spanning Tree",permalink:"/graaf/docs/category/minimum-spanning-tree"},next:{title:"Prim's Algorithm",permalink:"/graaf/docs/algorithms/minimum-spanning-tree/prim"}},p={},l=[{value:"Syntax",id:"syntax",level:2},{value:"Special case",id:"special-case",level:3}],m={toc:l},c="wrapper";function g(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"kruskals-algorithm"},"Kruskal's Algorithm"),(0,i.kt)("p",null,"Kruskal's algorithm finds the minimum spanning forest of an undirected edge-weighted graph. If the graph is connected,\nit finds a minimum spanning tree.\nThe algorithm is implemented with disjoint set union and finding minimum weighted edges.\nWorst-case performance is ",(0,i.kt)("inlineCode",{parentName:"p"},"O(|E|log|V|)"),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"|E|")," is the number of edges and ",(0,i.kt)("inlineCode",{parentName:"p"},"|V|")," is the number of vertices in the\ngraph. Memory usage is ",(0,i.kt)("inlineCode",{parentName:"p"},"O(V+E)")," for maintaining vertices (DSU) and edges."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Kruskal%27s_algorithm"},"wikipedia")),(0,i.kt)("h2",{id:"syntax"},"Syntax"),(0,i.kt)("p",null,"Calculates the shortest path with the minimum edge sum."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"template <typename V, typename E>\n[[nodiscard]] std::vector<edge_id_t> kruskal_minimum_spanning_tree(\n    const graph<V, E, graph_type::UNDIRECTED>& graph);\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"graph")," The graph to extract MST or MSF."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"return")," Returns a vector of edges that form MST if the graph is connected, otherwise it returns the minimum\nspanning forest.")),(0,i.kt)("h3",{id:"special-case"},"Special case"),(0,i.kt)("p",null,"In case of multiply edges with same weight leading to a vertex, prioritizing vertices with lesser vertex number."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"std::sort(edges_to_process.begin(), edges_to_process.end(),\n              [](detail::edge_to_process<E>& e1,\n                 detail::edge_to_process<E>& e2) {\n                       if (e1 != e2)\n                           return e1.get_weight() < e2.get_weight();\n          return e1.vertex_a < e2.vertex_a || e1.vertex_b < e2.vertex_b;\n        });\n")),(0,i.kt)("p",null,"For custom type edge, we should provide < and != operators"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"struct custom_edge : public graaf::weighted_edge<int> {\n public:\n  int weight_{};\n\n  [[nodiscard]] int get_weight() const noexcept override { return weight_; }\n \n  custom_edge(int weight): weight_{weight} {};\n  custom_edge(){};\n  ~custom_edge(){};\n\n  // Providing '<' and '!=' operators for sorting edges\n  bool operator<(const custom_edge& e) const noexcept {\n    return this->weight_ < e.weight_;\n  }\n  bool operator!=(const custom_edge& e) const noexcept {\n    return this->weight_ != e.weight_;\n  }\n};\n")))}g.isMDXComponent=!0}}]);