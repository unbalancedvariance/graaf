"use strict";(self.webpackChunkgraaf=self.webpackChunkgraaf||[]).push([[116],{3905:(t,e,r)=>{r.d(e,{Zo:()=>s,kt:()=>d});var o=r(7294);function n(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function a(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,o)}return r}function l(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?a(Object(r),!0).forEach((function(e){n(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function i(t,e){if(null==t)return{};var r,o,n=function(t,e){if(null==t)return{};var r,o,n={},a=Object.keys(t);for(o=0;o<a.length;o++)r=a[o],e.indexOf(r)>=0||(n[r]=t[r]);return n}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(o=0;o<a.length;o++)r=a[o],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(n[r]=t[r])}return n}var c=o.createContext({}),p=function(t){var e=o.useContext(c),r=e;return t&&(r="function"==typeof t?t(e):l(l({},e),t)),r},s=function(t){var e=p(t.components);return o.createElement(c.Provider,{value:e},t.children)},g="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},u=o.forwardRef((function(t,e){var r=t.components,n=t.mdxType,a=t.originalType,c=t.parentName,s=i(t,["components","mdxType","originalType","parentName"]),g=p(r),u=n,d=g["".concat(c,".").concat(u)]||g[u]||m[u]||a;return r?o.createElement(d,l(l({ref:e},s),{},{components:r})):o.createElement(d,l({ref:e},s))}));function d(t,e){var r=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var a=r.length,l=new Array(a);l[0]=u;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=t,i[g]="string"==typeof t?t:n,l[1]=i;for(var p=2;p<a;p++)l[p]=r[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,r)}u.displayName="MDXCreateElement"},1435:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var o=r(7462),n=(r(7294),r(3905));const a={},l="Topological sort algorithm",i={unversionedId:"algorithms/topological-sort/topological-sort",id:"algorithms/topological-sort/topological-sort",title:"Topological sort algorithm",description:"Topological sort algorithm processing DAG(directed acyclic graph) using DFS traversal.",source:"@site/docs/algorithms/topological-sort/topological-sort.md",sourceDirName:"algorithms/topological-sort",slug:"/algorithms/topological-sort/",permalink:"/graaf/docs/algorithms/topological-sort/",draft:!1,editUrl:"https://github.com/bobluppes/graaf/tree/main/docs/algorithms/topological-sort/topological-sort.md",tags:[],version:"current",frontMatter:{},sidebar:"algorithmSidebar",previous:{title:"Tarjan's Strongly Connected Components",permalink:"/graaf/docs/algorithms/strongly-connected-components/tarjan"},next:{title:"Traversal Algorithms",permalink:"/graaf/docs/category/traversal-algorithms"}},c={},p=[{value:"Syntax",id:"syntax",level:2}],s={toc:p},g="wrapper";function m(t){let{components:e,...r}=t;return(0,n.kt)(g,(0,o.Z)({},s,r,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"topological-sort-algorithm"},"Topological sort algorithm"),(0,n.kt)("p",null,"Topological sort algorithm processing DAG(directed acyclic graph) using DFS traversal.\nEach vertex is visited only after all its dependencies are visited.\nThe runtime of the algorithm is ",(0,n.kt)("inlineCode",{parentName:"p"},"O(|V|+|E|)")," and the memory consumption is ",(0,n.kt)("inlineCode",{parentName:"p"},"O(|V|)"),"."),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Topological_sorting"},"wikipedia")),(0,n.kt)("h2",{id:"syntax"},"Syntax"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"template <typename V, typename E>\n[[nodiscard]] std::optional<std::vector<vertex_id_t>> topological_sort(\n    const graph<V, E, graph_type::DIRECTED>& graph);\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"graph")," The directed graph to traverse."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"return")," Vector of vertices sorted in topological order. If the graph contains cycles, it returns std::nullopt.")))}m.isMDXComponent=!0}}]);