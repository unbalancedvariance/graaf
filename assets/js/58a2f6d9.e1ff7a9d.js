"use strict";(self.webpackChunkgraaf=self.webpackChunkgraaf||[]).push([[854],{3905:(e,t,a)=>{a.d(t,{Zo:()=>o,kt:()=>g});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var d=r.createContext({}),l=function(e){var t=r.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},o=function(e){var t=l(e.components);return r.createElement(d.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,d=e.parentName,o=c(e,["components","mdxType","originalType","parentName"]),p=l(a),h=n,g=p["".concat(d,".").concat(h)]||p[h]||u[h]||i;return a?r.createElement(g,s(s({ref:t},o),{},{components:a})):r.createElement(g,s({ref:t},o))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,s=new Array(i);s[0]=h;var c={};for(var d in t)hasOwnProperty.call(t,d)&&(c[d]=t[d]);c.originalType=e,c[p]="string"==typeof e?e:n,s[1]=c;for(var l=2;l<i;l++)s[l]=a[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}h.displayName="MDXCreateElement"},9866:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=a(7462),n=(a(7294),a(3905));const i={sidebar_position:1},s="Graaf Architecture",c={unversionedId:"quickstart/basics/architecture",id:"quickstart/basics/architecture",title:"Graaf Architecture",description:"From a very high level, the project is structured in two parts:",source:"@site/docs/quickstart/basics/architecture.md",sourceDirName:"quickstart/basics",slug:"/quickstart/basics/architecture",permalink:"/graaf/docs/quickstart/basics/architecture",draft:!1,editUrl:"https://github.com/bobluppes/graaf/tree/main/docs/quickstart/basics/architecture.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"quickstartSidebar",previous:{title:"Quickstart - Basics",permalink:"/graaf/docs/category/quickstart---basics"},next:{title:"Creating Your First Graph",permalink:"/graaf/docs/quickstart/basics/creating-your-first-graph"}},d={},l=[{value:"Graph classes and core data structures",id:"graph-classes-and-core-data-structures",level:2},{value:"Directed and undirected graphs",id:"directed-and-undirected-graphs",level:3},{value:"Weighted graphs",id:"weighted-graphs",level:3},{value:"Algorithms and additional functionality",id:"algorithms-and-additional-functionality",level:2}],o={toc:l},p="wrapper";function u(e){let{components:t,...a}=e;return(0,n.kt)(p,(0,r.Z)({},o,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"graaf-architecture"},"Graaf Architecture"),(0,n.kt)("p",null,"From a very high level, the project is structured in two parts:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The graph classes and core data structures"),(0,n.kt)("li",{parentName:"ul"},"Algorithms and additional functionality")),(0,n.kt)("h2",{id:"graph-classes-and-core-data-structures"},"Graph classes and core data structures"),(0,n.kt)("p",null,"The main class of the library is the abstract graph class:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"enum class edge_type { WEIGHTED, UNWEIGHTED };\nenum class graph_spec { DIRECTED, UNDIRECTED };\n\ntemplate <typename VERTEX_T, typename EDGE_T, edge_type EDGE_TYPE_V, graph_spec GRAPH_SPEC_V>\nclass graph {...};\n")),(0,n.kt)("p",null,"An instance of a ",(0,n.kt)("inlineCode",{parentName:"p"},"graph")," can have user provided types for the vertices and edges. Internally, it stores the graph in an\nadjacency list, and has separate containers for the vertex and edge instances:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"// N.B. These types are a bit more abstracted in the codebase behind using\n// declarations, but for clarity I have left this out.\n\n// Adjacency information is stored in a set for fast existence checks and fast removal\nstd::unordered_map<vertex_id_t, std::unordered_set<vertex_id_t>> adjacency_list_{};\n\n// Storing these in a separate container has the advantage that\n// vertices and edges are only in memory once\nstd::unordered_map<vertex_id_t, VERTEX_T> vertices_{};\nstd::unordered_map<std::pair<vertex_id_t, vertex_id_t>, edge_t, edge_id_hash> edges_{};\n")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"graph")," class is abstract as it contains pure virtual private methods related to the handling of\nedges (",(0,n.kt)("inlineCode",{parentName:"p"},"do_has_edge"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"do_get_edge"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"do_add_edge"),", and ",(0,n.kt)("inlineCode",{parentName:"p"},"do_remove_edge"),")."),(0,n.kt)("h3",{id:"directed-and-undirected-graphs"},"Directed and undirected graphs"),(0,n.kt)("p",null,"There are two classes which publicly derive from ",(0,n.kt)("inlineCode",{parentName:"p"},"graph"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"directed_graph")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"undirected_graph"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template <typename VERTEX_T, typename EDGE_T, edge_type EDGE_TYPE_V = edge_type::UNWEIGHTED>\nclass directed_graph final\n    : public graph<VERTEX_T, EDGE_T, EDGE_TYPE_V, graph_spec::DIRECTED> \n    {...};\n\ntemplate <typename VERTEX_T, typename EDGE_T, edge_type EDGE_TYPE_V = edge_type::UNWEIGHTED>\nclass undirected_graph final\n    : public graph<VERTEX_T, EDGE_T, EDGE_TYPE_V, graph_spec::UNDIRECTED> \n    {...};\n")),(0,n.kt)("p",null,"These are the classes which the user instantiates."),(0,n.kt)("p",null,"They provide implementations for the pure virtual methods related to handling edges. The ",(0,n.kt)("inlineCode",{parentName:"p"},"unweighted_graph")," first sorts\nthe pair of vertex ids related to an edge before interacting with the internal ",(0,n.kt)("inlineCode",{parentName:"p"},"edges_")," data structure. This ensures\nthat an edge ",(0,n.kt)("strong",{parentName:"p"},"a"),"->",(0,n.kt)("strong",{parentName:"p"},"b")," is the same as an edge from ",(0,n.kt)("strong",{parentName:"p"},"b"),"->",(0,n.kt)("strong",{parentName:"p"},"a"),"."),(0,n.kt)("h3",{id:"weighted-graphs"},"Weighted graphs"),(0,n.kt)("p",null,"Certain algorithms (such as A*) operate on weighted graphs. A graph is automatically weighted if a primitive numeric\ntype is passed as a template parameter to ",(0,n.kt)("inlineCode",{parentName:"p"},"EDGE_T"),". Alternatively, user provided edge classes can publicly derive\nfrom ",(0,n.kt)("inlineCode",{parentName:"p"},"weighted_edge"),"."),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"weighted_edge")," class provides a default implementation for the ",(0,n.kt)("inlineCode",{parentName:"p"},"get_weight")," method, but this can be overridden in\nthe derived class:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template <typename WEIGHT_T = int>\nclass weighted_edge {\n public:\n  using weight_t = WEIGHT_T;\n  /**\n   * By default an edge has a unit weight.\n   */\n  [[nodiscard]] virtual WEIGHT_T get_weight() const noexcept { return 1; };\n};\n\n")),(0,n.kt)("p",null,"To create an unweighted graph, simply do not derive from ",(0,n.kt)("inlineCode",{parentName:"p"},"weighted_edge")," in your edge class."),(0,n.kt)("h2",{id:"algorithms-and-additional-functionality"},"Algorithms and additional functionality"),(0,n.kt)("p",null,"The idea here is to keep the graph classes as general-purpose as possible, and to not include use case specific logic (\nsuch as dot serialization) as member functions. Therefore, each algorithm/utility function is implemented as a free\nfunction."))}u.isMDXComponent=!0}}]);